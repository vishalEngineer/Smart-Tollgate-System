import cv2
import numpy as np

imag=cv2.imread("....",0)//upload the input image along with extension
cv2.imshow("gray",imag)
cv2.waitKey(0)
img=cv2.bitwise_not(imag)
cv2.imshow("bnot",img)
cv2.waitKey(0)
#ret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
height,width=img.shape[:2]
start_row,start_col=int(height*0.5),int(width*0.3)
end_row,end_col=int(height*0.8),int(width*0.7)
cropped=img[start_row:end_row,start_col:end_col]
cv2.imshow('crop',cropped)
cv2.waitKey(0)
ret,thresh1 = cv2.threshold(cropped,127,255,cv2.THRESH_BINARY)
cv2.imshow('crop2',thresh1)
img_1=cv2.bitwise_not(thresh1)

cv2.imwrite("mom.jpg",img_1)





# Load our image
image = cv2.imread('mom.jpg')
cv2.imshow('0 - Original Image', image)
cv2.waitKey(0)

# Create a black image with same dimensions as our loaded image
blank_image = np.zeros((image.shape[0], image.shape[1], 3))

# Create a copy of our original image
orginal_image = image

# Grayscale our image
gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

# Find Canny edges
edged = cv2.Canny(gray, 50, 200)
cv2.imshow('1 - Canny Edges', edged)
cv2.waitKey(0)

# Find contours and print how many were found
contours, hierarchy = cv2.findContours(edged.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
print ("Number of contours found = ", len(contours))

#Draw all contours
cv2.drawContours(blank_image, contours, -1, (0,255,0), 3)
cv2.imshow('2 - All Contours over blank image', blank_image)
cv2.waitKey(0)

# Draw all contours over blank image
cv2.drawContours(image, contours, -1, (0,255,0), 3)
cv2.imshow('3 - All Contours', image)
cv2.waitKey(0)

import cv2
import numpy as np

# Function we'll use to display contour area

def get_contour_areas(contours):
    # returns the areas of all contours as list
    all_areas = []
    for cnt in contours:
        area = cv2.contourArea(cnt)
        all_areas.append(area)
    return all_areas

# Load our image
image = cv2.imread('mom.jpg')
orginal_image = image

# Let's print the areas of the contours before sorting
print "Contor Areas before sorting", 
print get_contour_areas(contours)

# Sort contours large to small
sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)
#sorted_contours = sorted(contours, key=cv2.contourArea, reverse=True)[:3]

print "Contor Areas after sorting", 
print get_contour_areas(sorted_contours)

# Iterate over our contours and draw one at a time
for c in sorted_contours:
    cv2.drawContours(orginal_image, [c], -1, (255,0,0), 3)
    cv2.waitKey(0)
    cv2.imshow('Contours by area', orginal_image)
    cv2.imwrite("dad.jpg",orginal_image)
    break

from PIL import Image
import pytesseract

img = Image.open('dad.jpg')
img.load()
i = pytesseract.image_to_string(img)
print i
cv2.waitKey(0)
cv2.destroyAllWindows()
